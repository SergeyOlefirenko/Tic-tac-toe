{"ast":null,"code":"// import { SCORES } from \"./constants\";\n// import { SCORES, switchPlayer } from \"./utils\";\n\n// export const minimax = (board, player) => {\n//   const mult = SCORES[String(player)];\n//   let thisScore;\n//   let maxScore = -1;\n//   let bestMove = null;\n\n//   if (board.getWinner() !== null) {\n//     return [SCORES[board.getWinner()], 0];\n//   } else {\n//     for (let empty of board.getEmptySquares()) {\n//       let copy = board.clone();\n//       copy.makeMove(empty, player);\n//       thisScore = mult * minimax(copy, switchPlayer(player))[0];\n\n//       if (thisScore >= maxScore) {\n//         maxScore = thisScore;\n//         bestMove = empty;\n//       }\n//     }\n\n//     return [mult * maxScore, bestMove];\n//   }\n// };","map":{"version":3,"names":[],"sources":["C:/Users/olefi/OneDrive/Рабочий стол/tictactoereact/src/minimax.js"],"sourcesContent":["// import { SCORES } from \"./constants\";\r\n// import { SCORES, switchPlayer } from \"./utils\";\r\n\r\n// export const minimax = (board, player) => {\r\n//   const mult = SCORES[String(player)];\r\n//   let thisScore;\r\n//   let maxScore = -1;\r\n//   let bestMove = null;\r\n\r\n//   if (board.getWinner() !== null) {\r\n//     return [SCORES[board.getWinner()], 0];\r\n//   } else {\r\n//     for (let empty of board.getEmptySquares()) {\r\n//       let copy = board.clone();\r\n//       copy.makeMove(empty, player);\r\n//       thisScore = mult * minimax(copy, switchPlayer(player))[0];\r\n\r\n//       if (thisScore >= maxScore) {\r\n//         maxScore = thisScore;\r\n//         bestMove = empty;\r\n//       }\r\n//     }\r\n\r\n//     return [mult * maxScore, bestMove];\r\n//   }\r\n// };\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}