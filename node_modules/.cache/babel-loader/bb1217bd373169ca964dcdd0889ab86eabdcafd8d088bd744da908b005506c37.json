{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\olefi\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\tictactoereact\\\\src\\\\components\\\\AI.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport Modal from \"react-modal\";\nimport Board from \"./AiBoard\";\nimport { css } from \"styled-components\";\nimport { AppContext } from \"../App\";\nimport { useContext } from \"react\";\nimport { PLAYER_X, PLAYER_O, SQUARE_DIMS, DRAW, GAME_STATES, DIMS, GAME_MODES, getRandomInt, switchPlayer, minimax } from \"./AiBoard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const border = css`\n  border-bottom-left-radius: 15px 255px;\n  border-bottom-right-radius: 225px 15px;\n  border-top-left-radius: 255px 15px;\n  border-top-right-radius: 15px 225px;\n  border: 2px solid #41403e;\n`;\nconst arr = new Array(DIMS ** 2).fill(null);\nconst board = new Board();\nconst TicTacToe = _ref => {\n  _s();\n  let {\n    squares = arr\n  } = _ref;\n  const [players, setPlayers] = useState({\n    human: null,\n    computer: null\n  });\n  const [gameState, setGameState] = useState(GAME_STATES.notStarted);\n  const [grid, setGrid] = useState(squares);\n  const [winner, setWinner] = useState(null);\n  const [nextMove, setNextMove] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [mode, setMode] = useState(GAME_MODES.medium);\n  const {\n    user1\n  } = useContext(AppContext);\n  const {\n    user2\n  } = useContext(AppContext);\n\n  /**\r\n   * On every move, check if there is a winner. If yes, set game state to over and open result modal\r\n   */\n  useEffect(() => {\n    const winner = board.getWinner(grid);\n    const declareWinner = winner => {\n      let winnerStr;\n      switch (winner) {\n        case PLAYER_X:\n          winnerStr = \"Player X wins!\";\n          break;\n        case PLAYER_O:\n          winnerStr = \"Player O wins!\";\n          break;\n        case DRAW:\n        default:\n          winnerStr = \"It's a draw\";\n      }\n      setGameState(GAME_STATES.over);\n      setWinner(winnerStr);\n      // Slight delay for the modal so there is some time to see the last move\n      setTimeout(() => setModalOpen(true), 300);\n    };\n    if (winner !== null && gameState !== GAME_STATES.over) {\n      declareWinner(winner);\n    }\n  }, [gameState, grid, nextMove]);\n\n  /*\r\n   * Set the grid square with respective player that made the move. Only make a move when the game is in progress.\r\n   * useCallback is necessary to prevent unnecessary recreation of the function, unless gameState changes, since it is\r\n   * being tracked in useEffect\r\n   */\n  const move = useCallback((index, player) => {\n    if (player && gameState === GAME_STATES.inProgress) {\n      setGrid(grid => {\n        const gridCopy = grid.concat();\n        gridCopy[index] = player;\n        return gridCopy;\n      });\n    }\n  }, [gameState]);\n\n  /*\r\n   * Make computer move. If it's the first move (board is empty), make move at any random cell to skip\r\n   * unnecessary minimax calculations\r\n   */\n  const computerMove = useCallback(() => {\n    // Important to pass a copy of the grid here\n    const board = new Board(grid.concat());\n    const emptyIndices = board.getEmptySquares(grid);\n    let index;\n    switch (mode) {\n      case GAME_MODES.easy:\n        do {\n          index = getRandomInt(0, 8);\n        } while (!emptyIndices.includes(index));\n        break;\n      case GAME_MODES.medium:\n        // Medium level is basically ~half of the moves are minimax and the other ~half random\n        const smartMove = !board.isEmpty(grid) && Math.random() < 0.5;\n        if (smartMove) {\n          index = minimax(board, players.computer)[1];\n        } else {\n          do {\n            index = getRandomInt(0, 8);\n          } while (!emptyIndices.includes(index));\n        }\n        break;\n      case GAME_MODES.difficult:\n      default:\n        index = board.isEmpty(grid) ? getRandomInt(0, 8) : minimax(board, players.computer)[1];\n    }\n    if (!grid[index]) {\n      move(index, players.computer);\n      setNextMove(players.human);\n    }\n  }, [move, grid, players, mode]);\n\n  /**\r\n   * Make computer move when it's computer's turn\r\n   */\n  useEffect(() => {\n    let timeout;\n    if (nextMove !== null && nextMove === players.computer && gameState !== GAME_STATES.over) {\n      // Delay computer moves to make them more natural\n      timeout = setTimeout(() => {\n        computerMove();\n      }, 500);\n    }\n    return () => timeout && clearTimeout(timeout);\n  }, [nextMove, computerMove, players.computer, gameState]);\n  const humanMove = index => {\n    if (!grid[index] && nextMove === players.human) {\n      move(index, players.human);\n      setNextMove(players.computer);\n    }\n  };\n  const choosePlayer = option => {\n    setPlayers({\n      human: option,\n      computer: switchPlayer(option)\n    });\n    setGameState(GAME_STATES.inProgress);\n    setNextMove(PLAYER_X);\n  };\n  const startNewGame = () => {\n    setGameState(GAME_STATES.notStarted);\n    setGrid(arr);\n    setModalOpen(false);\n  };\n  const changeMode = e => {\n    setMode(e.target.value);\n  };\n  const card = {\n    height: '85vh',\n    marginBottom: '2px'\n  };\n  {/* <div className=\"card w-96 text-primary-content\">\r\n          <div className='plannerstyle' style={{ backgroundImage: `url(${background})` }}></div>  */}\n  return gameState === GAME_STATES.notStarted ? /*#__PURE__*/_jsxDEV(Screen, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inner\",\n      children: /*#__PURE__*/_jsxDEV(Inner, {\n        children: [/*#__PURE__*/_jsxDEV(ChooseText, {\n          children: \"Choose play item\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ButtonRow, {\n          className: \"buttonRow\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"aiBtn1\",\n            onClick: () => choosePlayer(PLAYER_X),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Inner, {\n            children: [/*#__PURE__*/_jsxDEV(ChooseText, {\n              children: \"Select level\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              onChange: changeMode,\n              value: mode,\n              children: Object.keys(GAME_MODES).map(key => {\n                const gameMode = GAME_MODES[key];\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: gameMode,\n                  children: key\n                }, gameMode, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 15\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"aiBtn2\",\n            onClick: () => choosePlayer(PLAYER_O),\n            children: \"O\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Container, {\n    className: \"styleContainer\",\n    dims: DIMS,\n    children: [grid.map((value, index) => {\n      const isActive = value !== null;\n      return /*#__PURE__*/_jsxDEV(Square, {\n        className: \"styleSquares\",\n        \"data-testid\": `square_${index}`,\n        onClick: () => humanMove(index),\n        children: isActive && /*#__PURE__*/_jsxDEV(Marker, {\n          children: value === PLAYER_X ? \"X\" : \"O\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 26\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(Strikethrough, {\n      styles: gameState === GAME_STATES.over && board.getStrikethroughStyles()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultModal, {\n      isOpen: modalOpen,\n      winner: winner,\n      close: () => setModalOpen(false),\n      startNewGame: startNewGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n// </div>\n// aiGame data\n_s(TicTacToe, \"XSUPqoRVK5yv7HyxuUl2F5sOGfI=\");\n_c = TicTacToe;\nconst Container = styled.div`\n  // width: ${_ref2 => {\n  let {\n    dims\n  } = _ref2;\n  return `${dims * (SQUARE_DIMS + 5)}px`;\n}};\n  margin-top: 30%;\n  width: 300px;\n  height: 300px;\n  display: flex;\n  flex-wrap: wrap;\n`;\n_c2 = Container;\nconst Square = styled.div`\n  width: ${SQUARE_DIMS}px;\n  height: ${SQUARE_DIMS}px;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n_c3 = Square;\nSquare.displayName = \"Square\";\nconst Marker = styled.p`\n  font-size: 68px;\n  font-family: 'Mansalva', cursive;\n  \n`;\n_c4 = Marker;\nconst ButtonRow = styled.div``;\n_c5 = ButtonRow;\nconst Screen = styled.div``;\n_c6 = Screen;\nconst Inner = styled.div``;\n_c7 = Inner;\nconst ChooseText = styled.p``;\n_c8 = ChooseText;\nconst Strikethrough = styled.div`\n  position: absolute;\n  ${_ref3 => {\n  let {\n    styles\n  } = _ref3;\n  return styles;\n}}\n  background-color: indianred;\n  height: 5px;\n  width: ${_ref4 => {\n  let {\n    styles\n  } = _ref4;\n  return !styles && \"0px\";\n}};\n`;\n_c9 = Strikethrough;\nexport default TicTacToe;\n// Result\nconst customStyles = {\n  overlay: {\n    backgroundColor: \"rgba(0,0,0, 0.6)\"\n  }\n};\nexport const ResultModal = _ref5 => {\n  let {\n    isOpen,\n    close,\n    startNewGame,\n    winner\n  } = _ref5;\n  return /*#__PURE__*/_jsxDEV(StyledModal, {\n    isOpen: isOpen,\n    onRequestClose: close,\n    style: customStyles,\n    ariaHideApp: false,\n    children: [/*#__PURE__*/_jsxDEV(Footer, {\n      children: /*#__PURE__*/_jsxDEV(FooterInner, {\n        children: [\"View the code on\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://github.com/SergeyOlefirenko/Tic-tac-toe\",\n          children: \"Github\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(ModalTitle, {\n        children: \"Game over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n        children: winner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: close,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: startNewGame,\n          children: \"Start over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 5\n  }, this);\n};\n// const Main = styled.main`\n//   display: flex;\n//   flex-direction: column;\n//   justify-content: center;\n//   align-items: center;\n//   flex: 1 0 auto;\n// `;\n\n// Game over style\n_c10 = ResultModal;\nconst Footer = styled.footer`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  flex: 0 0 auto;\n`;\n_c11 = Footer;\nconst FooterInner = styled.div`\n  padding: 16px 0;\n`;\n_c12 = FooterInner;\nconst StyledModal = styled(Modal)`\n  height: 300px;\n  position: relative;\n  margin: 0 auto;\n  top: 10%;\n  right: auto;\n  bottom: auto;\n  width: 320px;\n  outline: none;\n  display: flex;\n  flex-direction: column;\n`;\n_c13 = StyledModal;\nconst ModalWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 24px;\n  background-color: #fff;\n  max-height: 100%;\n  height: 100%;\n  align-items: center;\n  backface-visibility: hidden;\n  padding: 1.25rem;\n  ${border};\n`;\n\n// Game over styles\n_c14 = ModalWrapper;\nconst ModalTitle = styled.p`\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n  font-size: 24px;\n  font-weight: bold;\n  text-transform: uppercase;\n`;\n_c15 = ModalTitle;\nconst ModalContent = styled.p`\n  flex: 1 1 auto;\n  text-align: center;\n`;\n_c16 = ModalContent;\nModalContent.displayName = \"ModalContent\";\nconst ModalFooter = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex: 0 0 auto;\n  width: 100%;\n`;\n_c17 = ModalFooter;\nconst Button = styled.button`\n  font-size: 16px;\n`;\n_c18 = Button;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18;\n$RefreshReg$(_c, \"TicTacToe\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"Square\");\n$RefreshReg$(_c4, \"Marker\");\n$RefreshReg$(_c5, \"ButtonRow\");\n$RefreshReg$(_c6, \"Screen\");\n$RefreshReg$(_c7, \"Inner\");\n$RefreshReg$(_c8, \"ChooseText\");\n$RefreshReg$(_c9, \"Strikethrough\");\n$RefreshReg$(_c10, \"ResultModal\");\n$RefreshReg$(_c11, \"Footer\");\n$RefreshReg$(_c12, \"FooterInner\");\n$RefreshReg$(_c13, \"StyledModal\");\n$RefreshReg$(_c14, \"ModalWrapper\");\n$RefreshReg$(_c15, \"ModalTitle\");\n$RefreshReg$(_c16, \"ModalContent\");\n$RefreshReg$(_c17, \"ModalFooter\");\n$RefreshReg$(_c18, \"Button\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","styled","Modal","Board","css","AppContext","useContext","PLAYER_X","PLAYER_O","SQUARE_DIMS","DRAW","GAME_STATES","DIMS","GAME_MODES","getRandomInt","switchPlayer","minimax","border","arr","Array","fill","board","TicTacToe","squares","players","setPlayers","human","computer","gameState","setGameState","notStarted","grid","setGrid","winner","setWinner","nextMove","setNextMove","modalOpen","setModalOpen","mode","setMode","medium","user1","user2","getWinner","declareWinner","winnerStr","over","setTimeout","move","index","player","inProgress","gridCopy","concat","computerMove","emptyIndices","getEmptySquares","easy","includes","smartMove","isEmpty","Math","random","difficult","timeout","clearTimeout","humanMove","choosePlayer","option","startNewGame","changeMode","e","target","value","card","height","marginBottom","Object","keys","map","key","gameMode","isActive","getStrikethroughStyles","Container","div","dims","Square","displayName","Marker","p","ButtonRow","Screen","Inner","ChooseText","Strikethrough","styles","customStyles","overlay","backgroundColor","ResultModal","isOpen","close","Footer","footer","FooterInner","StyledModal","ModalWrapper","ModalTitle","ModalContent","ModalFooter","Button","button"],"sources":["C:/Users/olefi/OneDrive/Рабочий стол/tictactoereact/src/components/AI.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Modal from \"react-modal\";\r\nimport Board from \"./AiBoard\";\r\nimport { css } from \"styled-components\";\r\nimport { AppContext } from \"../App\";\r\nimport { useContext } from \"react\";\r\n\r\nimport {\r\n  PLAYER_X,\r\n  PLAYER_O,\r\n  SQUARE_DIMS,\r\n  DRAW,\r\n  GAME_STATES,\r\n  DIMS,\r\n  GAME_MODES,\r\n  getRandomInt,\r\n  switchPlayer,\r\n  minimax\r\n} from \"./AiBoard\";\r\n\r\n\r\nexport const border = css`\r\n  border-bottom-left-radius: 15px 255px;\r\n  border-bottom-right-radius: 225px 15px;\r\n  border-top-left-radius: 255px 15px;\r\n  border-top-right-radius: 15px 225px;\r\n  border: 2px solid #41403e;\r\n`;\r\nconst arr = new Array(DIMS ** 2).fill(null);\r\nconst board = new Board();\r\n\r\nconst TicTacToe = ({ squares = arr }) => {\r\n  const [players, setPlayers] = useState({ human: null, computer: null });\r\n  const [gameState, setGameState] = useState(GAME_STATES.notStarted);\r\n  const [grid, setGrid] = useState(squares);\r\n  const [winner, setWinner] = useState(null);\r\n  const [nextMove, setNextMove] = useState(null);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [mode, setMode] = useState(GAME_MODES.medium);\r\n  const { user1 } = useContext(AppContext)\r\n  const { user2 } = useContext(AppContext)\r\n\r\n\r\n  /**\r\n   * On every move, check if there is a winner. If yes, set game state to over and open result modal\r\n   */\r\n  useEffect(() => {\r\n    const winner = board.getWinner(grid);\r\n    const declareWinner = winner => {\r\n      let winnerStr;\r\n      switch (winner) {\r\n        case PLAYER_X:\r\n          winnerStr = \"Player X wins!\";\r\n          break;\r\n        case PLAYER_O:\r\n          winnerStr = \"Player O wins!\";\r\n          break;\r\n        case DRAW:\r\n        default:\r\n          winnerStr = \"It's a draw\";\r\n      }\r\n      setGameState(GAME_STATES.over);\r\n      setWinner(winnerStr);\r\n      // Slight delay for the modal so there is some time to see the last move\r\n      setTimeout(() => setModalOpen(true), 300);\r\n    };\r\n\r\n    if (winner !== null && gameState !== GAME_STATES.over) {\r\n      declareWinner(winner);\r\n    }\r\n  }, [gameState, grid, nextMove]);\r\n\r\n  /*\r\n   * Set the grid square with respective player that made the move. Only make a move when the game is in progress.\r\n   * useCallback is necessary to prevent unnecessary recreation of the function, unless gameState changes, since it is\r\n   * being tracked in useEffect\r\n   */\r\n  const move = useCallback(\r\n    (index, player) => {\r\n      if (player && gameState === GAME_STATES.inProgress) {\r\n        setGrid(grid => {\r\n          const gridCopy = grid.concat();\r\n          gridCopy[index] = player;\r\n          return gridCopy;\r\n        });\r\n      }\r\n    },\r\n    [gameState]\r\n  );\r\n\r\n  /*\r\n   * Make computer move. If it's the first move (board is empty), make move at any random cell to skip\r\n   * unnecessary minimax calculations\r\n   */\r\n  const computerMove = useCallback(() => {\r\n    // Important to pass a copy of the grid here\r\n    const board = new Board(grid.concat());\r\n    const emptyIndices = board.getEmptySquares(grid);\r\n    let index;\r\n    switch (mode) {\r\n      case GAME_MODES.easy:\r\n        do {\r\n          index = getRandomInt(0, 8);\r\n        } while (!emptyIndices.includes(index));\r\n        break;\r\n      case GAME_MODES.medium:\r\n        // Medium level is basically ~half of the moves are minimax and the other ~half random\r\n        const smartMove = !board.isEmpty(grid) && Math.random() < 0.5;\r\n        if (smartMove) {\r\n          index = minimax(board, players.computer)[1];\r\n        } else {\r\n          do {\r\n            index = getRandomInt(0, 8);\r\n          } while (!emptyIndices.includes(index));\r\n        }\r\n        break;\r\n      case GAME_MODES.difficult:\r\n      default:\r\n        index = board.isEmpty(grid)\r\n          ? getRandomInt(0, 8)\r\n          : minimax(board, players.computer)[1];\r\n    }\r\n    if (!grid[index]) {\r\n      move(index, players.computer);\r\n      setNextMove(players.human);\r\n    }\r\n  }, [move, grid, players, mode]);\r\n\r\n  /**\r\n   * Make computer move when it's computer's turn\r\n   */\r\n  useEffect(() => {\r\n    let timeout;\r\n    if (\r\n      nextMove !== null &&\r\n      nextMove === players.computer &&\r\n      gameState !== GAME_STATES.over\r\n    ) {\r\n      // Delay computer moves to make them more natural\r\n      timeout = setTimeout(() => {\r\n        computerMove();\r\n      }, 500);\r\n    }\r\n    return () => timeout && clearTimeout(timeout);\r\n  }, [nextMove, computerMove, players.computer, gameState]);\r\n\r\n  const humanMove = index => {\r\n    if (!grid[index] && nextMove === players.human) {\r\n      move(index, players.human);\r\n      setNextMove(players.computer);\r\n    }\r\n  };\r\n\r\n  const choosePlayer = option => {\r\n    setPlayers({ human: option, computer: switchPlayer(option) });\r\n    setGameState(GAME_STATES.inProgress);\r\n    setNextMove(PLAYER_X);\r\n  };\r\n\r\n  const startNewGame = () => {\r\n    setGameState(GAME_STATES.notStarted);\r\n    setGrid(arr);\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const changeMode = e => {\r\n    setMode(e.target.value);\r\n  };\r\n  const card = {\r\n    height: '85vh',\r\n    marginBottom: '2px'\r\n  }\r\n{/* <div className=\"card w-96 text-primary-content\">\r\n        <div className='plannerstyle' style={{ backgroundImage: `url(${background})` }}></div>  */}\r\n  return gameState === GAME_STATES.notStarted ? (\r\n    <Screen>\r\n      <div className=\"inner\">\r\n      <Inner>\r\n        <ChooseText>Choose play item</ChooseText>\r\n        <ButtonRow className=\"buttonRow\">\r\n          <button className=\"aiBtn1\" onClick={() => choosePlayer(PLAYER_X)}>X</button>\r\n          {/* <div className=\"aiSelect\"> */}\r\n      <Inner>\r\n        <ChooseText>Select level</ChooseText>\r\n        <select onChange={changeMode} value={mode}>\r\n          {Object.keys(GAME_MODES).map(key => {\r\n            const gameMode = GAME_MODES[key];\r\n            return (\r\n              <option key={gameMode} value={gameMode}>\r\n                {key}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      </Inner>\r\n      {/* </div> */}\r\n          <button className=\"aiBtn2\" onClick={() => choosePlayer(PLAYER_O)}>O</button>\r\n        </ButtonRow>\r\n      </Inner>\r\n      </div>\r\n    </Screen>\r\n  ) : (\r\n    <Container className=\"styleContainer\" dims={DIMS}>\r\n      {grid.map((value, index) => {\r\n        const isActive = value !== null;\r\n\r\n        return (\r\n          <Square className=\"styleSquares\"\r\n            data-testid={`square_${index}`}\r\n            key={index}\r\n            onClick={() => humanMove(index)}\r\n          >\r\n            {isActive && <Marker>{value === PLAYER_X ? \"X\" : \"O\"}</Marker>}\r\n          </Square>\r\n        );\r\n      })}\r\n      <Strikethrough\r\n        styles={\r\n          gameState === GAME_STATES.over && board.getStrikethroughStyles()\r\n        }\r\n      />\r\n      <ResultModal\r\n        isOpen={modalOpen}\r\n        winner={winner}\r\n        close={() => setModalOpen(false)}\r\n        startNewGame={startNewGame}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n// </div>\r\n// aiGame data\r\nconst Container = styled.div`\r\n  // width: ${({ dims }) => `${dims * (SQUARE_DIMS + 5)}px`};\r\n  margin-top: 30%;\r\n  width: 300px;\r\n  height: 300px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst Square = styled.div`\r\n  width: ${SQUARE_DIMS}px;\r\n  height: ${SQUARE_DIMS}px;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\nSquare.displayName = \"Square\";\r\nconst Marker = styled.p`\r\n  font-size: 68px;\r\n  font-family: 'Mansalva', cursive;\r\n  \r\n`;\r\nconst ButtonRow = styled.div``;\r\nconst Screen = styled.div``;\r\nconst Inner = styled.div``;\r\nconst ChooseText = styled.p``;\r\n\r\nconst Strikethrough = styled.div`\r\n  position: absolute;\r\n  ${({ styles }) => styles}\r\n  background-color: indianred;\r\n  height: 5px;\r\n  width: ${({ styles }) => !styles && \"0px\"};\r\n`;\r\n\r\nexport default TicTacToe;\r\n// Result\r\nconst customStyles = {\r\n  overlay: {\r\n    backgroundColor: \"rgba(0,0,0, 0.6)\"\r\n   \r\n  }\r\n};\r\n\r\nexport const ResultModal = ({ isOpen, close, startNewGame, winner }) => {\r\n\r\n  return (\r\n    <StyledModal\r\n      isOpen={isOpen}\r\n      onRequestClose={close}\r\n      style={customStyles}\r\n      ariaHideApp={false}\r\n    >\r\n      {/* <Main>\r\n      </Main> */}\r\n      <Footer>\r\n        <FooterInner>\r\n          View the code on{\" \"}\r\n          <a href='https://github.com/SergeyOlefirenko/Tic-tac-toe'>Github</a>\r\n        </FooterInner>\r\n      </Footer>\r\n      <ModalWrapper>\r\n        <ModalTitle>Game over</ModalTitle>\r\n        <ModalContent>{winner}</ModalContent>\r\n\r\n        <ModalFooter>\r\n          <Button onClick={close}>Close</Button>\r\n          <Button onClick={startNewGame}>Start over</Button>\r\n        </ModalFooter>\r\n      </ModalWrapper>\r\n    </StyledModal>\r\n  );\r\n};\r\n// const Main = styled.main`\r\n//   display: flex;\r\n//   flex-direction: column;\r\n//   justify-content: center;\r\n//   align-items: center;\r\n//   flex: 1 0 auto;\r\n// `;\r\n\r\n// Game over style\r\nconst Footer = styled.footer`\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 100%;\r\n  flex: 0 0 auto;\r\n`;\r\n\r\nconst FooterInner = styled.div`\r\n  padding: 16px 0;\r\n`;\r\nconst StyledModal = styled(Modal)`\r\n  height: 300px;\r\n  position: relative;\r\n  margin: 0 auto;\r\n  top: 10%;\r\n  right: auto;\r\n  bottom: auto;\r\n  width: 320px;\r\n  outline: none;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst ModalWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 24px;\r\n  background-color: #fff;\r\n  max-height: 100%;\r\n  height: 100%;\r\n  align-items: center;\r\n  backface-visibility: hidden;\r\n  padding: 1.25rem;\r\n  ${border};\r\n`;\r\n\r\n// Game over styles\r\n\r\nconst ModalTitle = styled.p`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n`;\r\n\r\nconst ModalContent = styled.p`\r\n  flex: 1 1 auto;\r\n  text-align: center;\r\n`;\r\nModalContent.displayName = \"ModalContent\";\r\n\r\nconst ModalFooter = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex: 0 0 auto;\r\n  width: 100%;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  font-size: 16px;\r\n`;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}