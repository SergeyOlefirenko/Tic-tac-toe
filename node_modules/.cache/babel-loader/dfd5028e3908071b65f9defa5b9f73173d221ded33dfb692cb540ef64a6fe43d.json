{"ast":null,"code":"// AI\nconst minimax = (board, player) => {\n  const mult = SCORES[String(player)];\n  let thisScore;\n  let maxScore = -1;\n  let bestMove = null;\n  if (board.getWinner() !== null) {\n    return [SCORES[board.getWinner()], 0];\n  } else {\n    for (let empty of board.getEmptySquares()) {\n      let copy = board.clone();\n      copy.makeMove(empty, player);\n      thisScore = mult * minimax(copy, switchPlayer(player))[0];\n      if (thisScore >= maxScore) {\n        maxScore = thisScore;\n        bestMove = empty;\n      }\n    }\n    return [mult * maxScore, bestMove];\n  }\n};\nexport const DIMS = 3;\nexport const DRAW = 0;\nexport const PLAYER_X = 1;\nexport const PLAYER_O = 2;\nexport const SCORES = {\n  1: 1,\n  0: 0,\n  2: -1\n};\nexport const SQUARE_DIMS = 100;\nexport const GAME_STATES = {\n  notStarted: \"not_started\",\n  inProgress: \"in_progress\",\n  over: \"over\"\n};\nexport const GAME_MODES = {\n  easy: \"easy\",\n  medium: \"medium\",\n  difficult: \"difficult\"\n};\nexport const switchPlayer = player => {\n  return player === PLAYER_X ? PLAYER_O : PLAYER_X;\n};\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};","map":{"version":3,"names":["minimax","board","player","mult","SCORES","String","thisScore","maxScore","bestMove","getWinner","empty","getEmptySquares","copy","clone","makeMove","switchPlayer","DIMS","DRAW","PLAYER_X","PLAYER_O","SQUARE_DIMS","GAME_STATES","notStarted","inProgress","over","GAME_MODES","easy","medium","difficult","getRandomInt","min","max","Math","ceil","floor","random"],"sources":["C:/Users/olefi/OneDrive/Рабочий стол/tictactoereact/src/utils.js"],"sourcesContent":["\r\n// AI\r\nconst minimax = (board, player) => {\r\n  const mult = SCORES[String(player)];\r\n  let thisScore;\r\n  let maxScore = -1;\r\n  let bestMove = null;\r\n\r\n  if (board.getWinner() !== null) {\r\n    return [SCORES[board.getWinner()], 0];\r\n  } else {\r\n    for (let empty of board.getEmptySquares()) {\r\n      let copy = board.clone();\r\n      copy.makeMove(empty, player);\r\n      thisScore = mult * minimax(copy, switchPlayer(player))[0];\r\n\r\n      if (thisScore >= maxScore) {\r\n        maxScore = thisScore;\r\n        bestMove = empty;\r\n      }\r\n    }\r\n\r\n    return [mult * maxScore, bestMove];\r\n  }\r\n};\r\n\r\nexport const DIMS = 3;\r\nexport const DRAW = 0;\r\nexport const PLAYER_X = 1;\r\nexport const PLAYER_O = 2;\r\nexport const SCORES = {\r\n  1: 1,\r\n  0: 0,\r\n  2: -1\r\n};\r\nexport const SQUARE_DIMS = 100;\r\nexport const GAME_STATES = {\r\n  notStarted: \"not_started\",\r\n  inProgress: \"in_progress\",\r\n  over: \"over\"\r\n};\r\n\r\nexport const GAME_MODES = {\r\n  easy: \"easy\",\r\n  medium: \"medium\",\r\n  difficult: \"difficult\"\r\n};\r\n\r\nexport const switchPlayer = player => {\r\n  return player === PLAYER_X ? PLAYER_O : PLAYER_X;\r\n};\r\n\r\nexport const getRandomInt = (min, max) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\n"],"mappings":"AACA;AACA,MAAMA,OAAO,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EACjC,MAAMC,IAAI,GAAGC,MAAM,CAACC,MAAM,CAACH,MAAM,CAAC,CAAC;EACnC,IAAII,SAAS;EACb,IAAIC,QAAQ,GAAG,CAAC,CAAC;EACjB,IAAIC,QAAQ,GAAG,IAAI;EAEnB,IAAIP,KAAK,CAACQ,SAAS,EAAE,KAAK,IAAI,EAAE;IAC9B,OAAO,CAACL,MAAM,CAACH,KAAK,CAACQ,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;EACvC,CAAC,MAAM;IACL,KAAK,IAAIC,KAAK,IAAIT,KAAK,CAACU,eAAe,EAAE,EAAE;MACzC,IAAIC,IAAI,GAAGX,KAAK,CAACY,KAAK,EAAE;MACxBD,IAAI,CAACE,QAAQ,CAACJ,KAAK,EAAER,MAAM,CAAC;MAC5BI,SAAS,GAAGH,IAAI,GAAGH,OAAO,CAACY,IAAI,EAAEG,YAAY,CAACb,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;MAEzD,IAAII,SAAS,IAAIC,QAAQ,EAAE;QACzBA,QAAQ,GAAGD,SAAS;QACpBE,QAAQ,GAAGE,KAAK;MAClB;IACF;IAEA,OAAO,CAACP,IAAI,GAAGI,QAAQ,EAAEC,QAAQ,CAAC;EACpC;AACF,CAAC;AAED,OAAO,MAAMQ,IAAI,GAAG,CAAC;AACrB,OAAO,MAAMC,IAAI,GAAG,CAAC;AACrB,OAAO,MAAMC,QAAQ,GAAG,CAAC;AACzB,OAAO,MAAMC,QAAQ,GAAG,CAAC;AACzB,OAAO,MAAMf,MAAM,GAAG;EACpB,CAAC,EAAE,CAAC;EACJ,CAAC,EAAE,CAAC;EACJ,CAAC,EAAE,CAAC;AACN,CAAC;AACD,OAAO,MAAMgB,WAAW,GAAG,GAAG;AAC9B,OAAO,MAAMC,WAAW,GAAG;EACzBC,UAAU,EAAE,aAAa;EACzBC,UAAU,EAAE,aAAa;EACzBC,IAAI,EAAE;AACR,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG;EACxBC,IAAI,EAAE,MAAM;EACZC,MAAM,EAAE,QAAQ;EAChBC,SAAS,EAAE;AACb,CAAC;AAED,OAAO,MAAMb,YAAY,GAAGb,MAAM,IAAI;EACpC,OAAOA,MAAM,KAAKgB,QAAQ,GAAGC,QAAQ,GAAGD,QAAQ;AAClD,CAAC;AAED,OAAO,MAAMW,YAAY,GAAG,CAACC,GAAG,EAAEC,GAAG,KAAK;EACxCD,GAAG,GAAGE,IAAI,CAACC,IAAI,CAACH,GAAG,CAAC;EACpBC,GAAG,GAAGC,IAAI,CAACE,KAAK,CAACH,GAAG,CAAC;EACrB,OAAOC,IAAI,CAACE,KAAK,CAACF,IAAI,CAACG,MAAM,EAAE,IAAIJ,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;AAC1D,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}