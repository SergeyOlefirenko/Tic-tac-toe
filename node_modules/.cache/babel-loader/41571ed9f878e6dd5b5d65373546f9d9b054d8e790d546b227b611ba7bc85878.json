{"ast":null,"code":"export function winCalc(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    // if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c])\n    if (squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n// Getting open space on board\nexport const getOpenTiles = board => {\n  let copy = [...board];\n  return copy.reduce((open, tile, index) => {\n    if (tile === -9) {\n      open.push(index);\n    }\n    return open;\n  }, []);\n};\nconst playNovice = cur_board => {\n  let boardCopy = [...cur_board];\n  const open_tiles = getOpenTiles(boardCopy);\n  // This is avaliable space\n  if (open_tiles.length) {\n    const rand = Math.random() * open_tiles.length;\n    return open_tiles[Math.floor(rand)];\n  }\n  return null;\n};\nexport const checkWinner = winCalc(board);\nconst playAI = (cur_board, cur_player, curDepth) => {\n  // Get current player. If player is user then minimize if AI then maximize\n  let next_move = 0;\n  const total_score = cur_player === AI ? -1000 : 1000;\n  let open_tiles = getOpenTiles(cur_board);\n  // Get open tiles for current gameboard\n  // Check if the game is in terminal state (AI won, Player won, Draw)\n  if (checkWinner(cur_board) || !open_tiles.length || curDepth != null && curDepth === DEPTH) {\n    return checkWinner(cur_board) === AI ? {\n      score: 10\n    } : checkWinner(cur_board) === PLAYER ? {\n      score: -10\n    } : {\n      score: 0\n    };\n  }\n  open_tiles.forEach(move => {\n    let boardCopy = [...cur_board];\n    boardCopy[move] = cur_player;\n    // Set open tile to current player\n    const nextPlayer = cur_player === AI ? PLAYER : AI;\n    if (curDepth != null) {\n      // Play intermediate\n      const result = playAI(boardCopy, nextPlayer, curDepth++);\n      // Get player 1 next possible move\n      moves.push({\n        index: move,\n        score: result.score\n      });\n    } else {\n      // Play expert\n      const result = playAI(boardCopy, nextPlayer);\n      // Get player 1 next possible move\n    }\n  });\n};\n// Iterate through each open tile\n\n// function concat(){\n\n// }\n\n// function checkWin(){\n//     bot()\n//     winCalc()\n// }\n\n// export function checkWin(){\n//     // let concat\n//     for (let i = 0; i<3; i++){\n//       let result = concat(i, i+3, i+6)\n//         if (result === 'XXX' || result === '000')\n//         {\n//             winCalc(i, i+3, i+6)\n//         }\n//     for (let i = 0; i<=6; i+=3){\n//       let result = concat(i, i+1, i+2)\n//         if (result === 'XXX' || result === '000')\n//         {\n//                   winCalc(i, i+1, i+2)\n//         }\n//     }\n//         result concat(0,4,8)\n//     if (result === 'XXX' || result === '000')\n//         {\n//                   winCalc(0,4,8)\n//         }\n//         result concat(2,4,5)\n//     if (result === 'XXX' || result === '000')\n//             {\n//                       winCalc(2,4,6)\n//             }\n// }\n// }","map":{"version":3,"names":["winCalc","squares","lines","i","length","a","b","c","getOpenTiles","board","copy","reduce","open","tile","index","push","playNovice","cur_board","boardCopy","open_tiles","rand","Math","random","floor","checkWinner","playAI","cur_player","curDepth","next_move","total_score","AI","DEPTH","score","PLAYER","forEach","move","nextPlayer","result","moves"],"sources":["C:/Users/olefi/OneDrive/Рабочий стол/tictactoereact/src/winCalc.jsx"],"sourcesContent":["export function winCalc(squares){\r\n    const lines = [\r\n    [0,1,2],\r\n    [3,4,5],\r\n    [6,7,8],\r\n    [0,3,6],\r\n    [1,4,7],\r\n    [2,5,8],\r\n    [0,4,8],\r\n    [2,4,6]\r\n    ];\r\n    for (let i = 0; i<lines.length; i++){\r\n        const [a, b, c] = lines[i]\r\n        // if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c])\r\n        if (squares[a] === squares[b] && squares[a] === squares[c])\r\n        {\r\n           return squares[a]\r\n        }\r\n    }\r\n    return null\r\n}\r\n// Getting open space on board\r\nexport const getOpenTiles = (board) =>{\r\n    let copy = [...board]\r\n    return copy.reduce((open, tile, index) =>{\r\n        if(tile === -9){\r\n            open.push(index);\r\n        }\r\n        return open;\r\n    },[])\r\n}\r\nconst playNovice = (cur_board) =>{\r\n    let boardCopy = [...cur_board];\r\n    const open_tiles = getOpenTiles(boardCopy);\r\n    // This is avaliable space\r\n    if(open_tiles.length){\r\nconst rand = Math.random() * open_tiles.length;\r\nreturn open_tiles[Math.floor(rand)];\r\n    }\r\n    return null;\r\n}\r\nexport const checkWinner = winCalc(board)\r\n\r\nconst playAI = (cur_board, cur_player, curDepth) =>{\r\n    // Get current player. If player is user then minimize if AI then maximize\r\n    let next_move = 0;\r\n    const total_score = cur_player === AI  ? -1000 : 1000;\r\n    let open_tiles = getOpenTiles(cur_board);\r\n    // Get open tiles for current gameboard\r\n    // Check if the game is in terminal state (AI won, Player won, Draw)\r\n    if(checkWinner(cur_board) || !open_tiles.length || curDepth != null && curDepth === DEPTH){\r\n        return checkWinner(cur_board) === AI ? {score: 10} : checkWinner(cur_board) === PLAYER ? {score: -10} : {score: 0}\r\n    }\r\n    open_tiles.forEach(move =>{\r\n        let boardCopy = [...cur_board];\r\n        boardCopy[move] = cur_player;\r\n        // Set open tile to current player\r\n        const nextPlayer = cur_player === AI ? PLAYER : AI;\r\n        if(curDepth !=null){\r\n            // Play intermediate\r\n        const result = playAI(boardCopy, nextPlayer, curDepth++)\r\n        // Get player 1 next possible move\r\n        moves.push({index: move, score: result.score})\r\n        }\r\n        else{\r\n            // Play expert\r\n            const result = playAI(boardCopy, nextPlayer)\r\n            // Get player 1 next possible move\r\n        }\r\n    })\r\n}\r\n// Iterate through each open tile\r\n\r\n// function concat(){\r\n    \r\n// }\r\n\r\n// function checkWin(){\r\n//     bot()\r\n//     winCalc()\r\n// }\r\n\r\n\r\n\r\n// export function checkWin(){\r\n//     // let concat\r\n//     for (let i = 0; i<3; i++){\r\n//       let result = concat(i, i+3, i+6)\r\n//         if (result === 'XXX' || result === '000')\r\n//         {\r\n//             winCalc(i, i+3, i+6)\r\n//         }\r\n//     for (let i = 0; i<=6; i+=3){\r\n//       let result = concat(i, i+1, i+2)\r\n//         if (result === 'XXX' || result === '000')\r\n//         {\r\n//                   winCalc(i, i+1, i+2)\r\n//         }\r\n//     }\r\n//         result concat(0,4,8)\r\n//     if (result === 'XXX' || result === '000')\r\n//         {\r\n//                   winCalc(0,4,8)\r\n//         }\r\n//         result concat(2,4,5)\r\n//     if (result === 'XXX' || result === '000')\r\n//             {\r\n//                       winCalc(2,4,6)\r\n//             }\r\n// }\r\n// }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}