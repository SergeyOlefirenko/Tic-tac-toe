{"ast":null,"code":"import { DIMS, DRAW } from \"./minimax\";\nexport default class Board {\n  constructor(_grid) {\n    var _this = this;\n    this.makeMove = (square, player) => {\n      if (this.grid[square] === null) {\n        this.grid[square] = player;\n      }\n    };\n    this.getEmptySquares = function () {\n      let grid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.grid;\n      let squares = [];\n      grid.forEach((square, i) => {\n        if (square === null) squares.push(i);\n      });\n      return squares;\n    };\n    this.isEmpty = function () {\n      let grid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.grid;\n      return _this.getEmptySquares(grid).length === DIMS ** 2;\n    };\n    this.getWinner = function () {\n      let grid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.grid;\n      const winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n      let res = null;\n      winningCombos.forEach((el, i) => {\n        if (grid[el[0]] !== null && grid[el[0]] === grid[el[1]] && grid[el[0]] === grid[el[2]]) {\n          res = grid[el[0]];\n          _this.winningIndex = i;\n        } else if (res === null && _this.getEmptySquares(grid).length === 0) {\n          res = DRAW;\n          _this.winningIndex = null;\n        }\n      });\n      return res;\n    };\n    this.getStrikethroughStyles = () => {\n      const defaultWidth = 285;\n      const diagonalWidth = 400;\n      switch (this.winningIndex) {\n        case 0:\n          return `\n          transform: none;\n          top: 41px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n        case 1:\n          return `\n          transform: none;\n          top: 140px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n        case 2:\n          return `\n          transform: none;\n          top: 242px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n        case 3:\n          return `\n          transform: rotate(90deg);\n          top: 145px;\n          left: -86px;\n          width: ${defaultWidth}px;\n        `;\n        case 4:\n          return `\n          transform: rotate(90deg);\n          top: 145px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n        case 5:\n          return `\n          transform: rotate(90deg);\n          top: 145px;\n          left: 115px;\n          width: ${defaultWidth}px;\n        `;\n        case 6:\n          return `\n          transform: rotate(45deg);\n          top: 145px;\n          left: -44px;\n          width: ${diagonalWidth}px;\n        `;\n        case 7:\n          return `\n          transform: rotate(-45deg);\n          top: 145px;\n          left: -46px;\n          width: ${diagonalWidth}px;\n        `;\n        default:\n          return null;\n      }\n    };\n    this.clone = () => {\n      return new Board(this.grid.concat());\n    };\n    this.grid = _grid || new Array(DIMS ** 2).fill(null);\n    this.winningIndex = null;\n  }\n}","map":{"version":3,"names":["DIMS","DRAW","Board","constructor","grid","makeMove","square","player","getEmptySquares","squares","forEach","i","push","isEmpty","length","getWinner","winningCombos","res","el","winningIndex","getStrikethroughStyles","defaultWidth","diagonalWidth","clone","concat","Array","fill"],"sources":["C:/Users/olefi/OneDrive/Рабочий стол/tictactoereact/src/Board.js"],"sourcesContent":["import { DIMS, DRAW } from \"./minimax\";\r\n\r\nexport default class Board {\r\n  constructor(grid) {\r\n    this.grid = grid || new Array(DIMS ** 2).fill(null);\r\n    this.winningIndex = null;\r\n  }\r\n\r\n  makeMove = (square, player) => {\r\n    if (this.grid[square] === null) {\r\n      this.grid[square] = player;\r\n    }\r\n  };\r\n\r\n  // Collect indices of empty squares and return them\r\n  getEmptySquares = (grid = this.grid) => {\r\n    let squares = [];\r\n    grid.forEach((square, i) => {\r\n      if (square === null) squares.push(i);\r\n    });\r\n    return squares;\r\n  };\r\n\r\n  isEmpty = (grid = this.grid) => {\r\n    return this.getEmptySquares(grid).length === DIMS ** 2;\r\n  };\r\n\r\n  getWinner = (grid = this.grid) => {\r\n    const winningCombos = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    let res = null;\r\n    winningCombos.forEach((el, i) => {\r\n      if (\r\n        grid[el[0]] !== null &&\r\n        grid[el[0]] === grid[el[1]] &&\r\n        grid[el[0]] === grid[el[2]]\r\n      ) {\r\n        res = grid[el[0]];\r\n        this.winningIndex = i;\r\n      } else if (res === null && this.getEmptySquares(grid).length === 0) {\r\n        res = DRAW;\r\n        this.winningIndex = null;\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  /**\r\n   * Get the styles for strike through based on the combination that won\r\n   */\r\n  getStrikethroughStyles = () => {\r\n    const defaultWidth = 285;\r\n    const diagonalWidth = 400;\r\n    switch (this.winningIndex) {\r\n      case 0:\r\n        return `\r\n          transform: none;\r\n          top: 41px;\r\n          left: 15px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 1:\r\n        return `\r\n          transform: none;\r\n          top: 140px;\r\n          left: 15px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 2:\r\n        return `\r\n          transform: none;\r\n          top: 242px;\r\n          left: 15px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 3:\r\n        return `\r\n          transform: rotate(90deg);\r\n          top: 145px;\r\n          left: -86px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 4:\r\n        return `\r\n          transform: rotate(90deg);\r\n          top: 145px;\r\n          left: 15px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 5:\r\n        return `\r\n          transform: rotate(90deg);\r\n          top: 145px;\r\n          left: 115px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 6:\r\n        return `\r\n          transform: rotate(45deg);\r\n          top: 145px;\r\n          left: -44px;\r\n          width: ${diagonalWidth}px;\r\n        `;\r\n      case 7:\r\n        return `\r\n          transform: rotate(-45deg);\r\n          top: 145px;\r\n          left: -46px;\r\n          width: ${diagonalWidth}px;\r\n        `;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  clone = () => {\r\n    return new Board(this.grid.concat());\r\n  };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}