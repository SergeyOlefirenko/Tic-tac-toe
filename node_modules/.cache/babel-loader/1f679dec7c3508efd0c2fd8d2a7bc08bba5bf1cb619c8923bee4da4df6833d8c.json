{"ast":null,"code":"\n// AI\n// const minimax = (board, player) => {\n//   const mult = SCORES[String(player)];\n//   let thisScore;\n//   let maxScore = -1;\n//   let bestMove = null;\n\n//   if (board.getWinner() !== null) {\n//     return [SCORES[board.getWinner()], 0];\n//   } else {\n//     for (let empty of board.getEmptySquares()) {\n//       let copy = board.clone();\n//       copy.makeMove(empty, player);\n//       thisScore = mult * minimax(copy, switchPlayer(player))[0];\n\n//       if (thisScore >= maxScore) {\n//         maxScore = thisScore;\n//         bestMove = empty;\n//       }\n//     }\n\n//     return [mult * maxScore, bestMove];\n//   }\n// };\n\n// export const DIMS = 3;\n// export const DRAW = 0;\n// export const PLAYER_X = 1;\n// export const PLAYER_O = 2;\n// export const SCORES = {\n//   1: 1,\n//   0: 0,\n//   2: -1\n// };\n// export const SQUARE_DIMS = 100;\n// export const GAME_STATES = {\n//   notStarted: \"not_started\",\n//   inProgress: \"in_progress\",\n//   over: \"over\"\n// };\n\n// export const GAME_MODES = {\n//   easy: \"easy\",\n//   medium: \"medium\",\n//   difficult: \"difficult\"\n// };\n\n// export const switchPlayer = player => {\n//   return player === PLAYER_X ? PLAYER_O : PLAYER_X;\n// };\n\n// export const getRandomInt = (min, max) => {\n//   min = Math.ceil(min);\n//   max = Math.floor(max);\n//   return Math.floor(Math.random() * (max - min + 1)) + min;\n// };","map":{"version":3,"names":[],"sources":["C:/Users/olefi/OneDrive/Рабочий стол/tictactoereact/src/utils.js"],"sourcesContent":["\r\n// AI\r\n// const minimax = (board, player) => {\r\n//   const mult = SCORES[String(player)];\r\n//   let thisScore;\r\n//   let maxScore = -1;\r\n//   let bestMove = null;\r\n\r\n//   if (board.getWinner() !== null) {\r\n//     return [SCORES[board.getWinner()], 0];\r\n//   } else {\r\n//     for (let empty of board.getEmptySquares()) {\r\n//       let copy = board.clone();\r\n//       copy.makeMove(empty, player);\r\n//       thisScore = mult * minimax(copy, switchPlayer(player))[0];\r\n\r\n//       if (thisScore >= maxScore) {\r\n//         maxScore = thisScore;\r\n//         bestMove = empty;\r\n//       }\r\n//     }\r\n\r\n//     return [mult * maxScore, bestMove];\r\n//   }\r\n// };\r\n\r\n// export const DIMS = 3;\r\n// export const DRAW = 0;\r\n// export const PLAYER_X = 1;\r\n// export const PLAYER_O = 2;\r\n// export const SCORES = {\r\n//   1: 1,\r\n//   0: 0,\r\n//   2: -1\r\n// };\r\n// export const SQUARE_DIMS = 100;\r\n// export const GAME_STATES = {\r\n//   notStarted: \"not_started\",\r\n//   inProgress: \"in_progress\",\r\n//   over: \"over\"\r\n// };\r\n\r\n// export const GAME_MODES = {\r\n//   easy: \"easy\",\r\n//   medium: \"medium\",\r\n//   difficult: \"difficult\"\r\n// };\r\n\r\n// export const switchPlayer = player => {\r\n//   return player === PLAYER_X ? PLAYER_O : PLAYER_X;\r\n// };\r\n\r\n// export const getRandomInt = (min, max) => {\r\n//   min = Math.ceil(min);\r\n//   max = Math.floor(max);\r\n//   return Math.floor(Math.random() * (max - min + 1)) + min;\r\n// };\r\n\r\n"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}