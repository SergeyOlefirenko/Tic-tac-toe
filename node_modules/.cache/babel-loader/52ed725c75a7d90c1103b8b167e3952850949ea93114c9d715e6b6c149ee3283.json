{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\olefi\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\tictactoereact\\\\src\\\\AI.jsx\",\n  _s = $RefreshSig$();\n// Inside APP\n// import React from \"react\";\nimport Modal from \"react-modal\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport styled from \"styled-components\";\n// import TicTacToe from \"./TicTacToe\";\nimport \"papercss/dist/paper.min.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst border = css`\n  border-bottom-left-radius: 15px 255px;\n  border-bottom-right-radius: 225px 15px;\n  border-top-left-radius: 255px 15px;\n  border-top-right-radius: 15px 225px;\n  border: 2px solid #41403e;\n`;\nconst DIMS = 3;\nconst DRAW = 0;\nconst PLAYER_X = 1;\nconst PLAYER_O = 2;\nconst SCORES = {\n  1: 1,\n  0: 0,\n  2: -1\n};\nconst SQUARE_DIMS = 100;\nconst GAME_STATES = {\n  notStarted: \"not_started\",\n  inProgress: \"in_progress\",\n  over: \"over\"\n};\nconst GAME_MODES = {\n  easy: \"easy\",\n  medium: \"medium\",\n  difficult: \"difficult\"\n};\nconst Main = styled.main`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  flex: 1 0 auto;\n`;\nconst Footer = styled.footer`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  flex: 0 0 auto;\n`;\nconst FooterInner = styled.div`\n  padding: 16px 0;\n`;\n// Board\nexport default class Board {\n  constructor(_grid) {\n    var _this = this;\n    this.makeMove = (square, player) => {\n      if (this.grid[square] === null) {\n        this.grid[square] = player;\n      }\n    };\n    this.getEmptySquares = function () {\n      let grid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.grid;\n      let squares = [];\n      grid.forEach((square, i) => {\n        if (square === null) squares.push(i);\n      });\n      return squares;\n    };\n    this.isEmpty = function () {\n      let grid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.grid;\n      return _this.getEmptySquares(grid).length === DIMS ** 2;\n    };\n    this.getWinner = function () {\n      let grid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.grid;\n      const winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n      let res = null;\n      winningCombos.forEach((el, i) => {\n        if (grid[el[0]] !== null && grid[el[0]] === grid[el[1]] && grid[el[0]] === grid[el[2]]) {\n          res = grid[el[0]];\n          _this.winningIndex = i;\n        } else if (res === null && _this.getEmptySquares(grid).length === 0) {\n          res = DRAW;\n          _this.winningIndex = null;\n        }\n      });\n      return res;\n    };\n    this.getStrikethroughStyles = () => {\n      const defaultWidth = 285;\n      const diagonalWidth = 400;\n      switch (this.winningIndex) {\n        case 0:\n          return `\n          transform: none;\n          top: 41px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n        case 1:\n          return `\n          transform: none;\n          top: 140px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n        case 2:\n          return `\n          transform: none;\n          top: 242px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n        case 3:\n          return `\n          transform: rotate(90deg);\n          top: 145px;\n          left: -86px;\n          width: ${defaultWidth}px;\n        `;\n        case 4:\n          return `\n          transform: rotate(90deg);\n          top: 145px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n        case 5:\n          return `\n          transform: rotate(90deg);\n          top: 145px;\n          left: 115px;\n          width: ${defaultWidth}px;\n        `;\n        case 6:\n          return `\n          transform: rotate(45deg);\n          top: 145px;\n          left: -44px;\n          width: ${diagonalWidth}px;\n        `;\n        case 7:\n          return `\n          transform: rotate(-45deg);\n          top: 145px;\n          left: -46px;\n          width: ${diagonalWidth}px;\n        `;\n        default:\n          return null;\n      }\n    };\n    this.clone = () => {\n      return new Board(this.grid.concat());\n    };\n    this.grid = _grid || new Array(DIMS ** 2).fill(null);\n    this.winningIndex = null;\n  }\n}\n// AI\nconst switchPlayer = player => {\n  return player === PLAYER_X ? PLAYER_O : PLAYER_X;\n};\nconst getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nconst minimax = (board, player) => {\n  const mult = SCORES[String(player)];\n  let thisScore;\n  let maxScore = -1;\n  let bestMove = null;\n  if (board.getWinner() !== null) {\n    return [SCORES[board.getWinner()], 0];\n  } else {\n    for (let empty of board.getEmptySquares()) {\n      let copy = board.clone();\n      copy.makeMove(empty, player);\n      thisScore = mult * minimax(copy, switchPlayer(player))[0];\n      if (thisScore >= maxScore) {\n        maxScore = thisScore;\n        bestMove = empty;\n      }\n    }\n    return [mult * maxScore, bestMove];\n  }\n};\n\n// Styles\nconst customStyles = {\n  overlay: {\n    backgroundColor: \"rgba(0,0,0, 0.6)\"\n  }\n};\nexport const ResultModal = _ref => {\n  let {\n    isOpen,\n    close,\n    startNewGame,\n    winner\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(StyledModal, {\n    isOpen: isOpen,\n    onRequestClose: close,\n    style: customStyles,\n    ariaHideApp: false,\n    children: /*#__PURE__*/_jsxDEV(ModalWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(ModalTitle, {\n        children: \"Game over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n        children: winner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: close,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: startNewGame,\n          children: \"Start over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n_c = ResultModal;\nconst StyledModal = styled(Modal)`\n  height: 300px;\n  position: relative;\n  margin: 0 auto;\n  top: 10%;\n  right: auto;\n  bottom: auto;\n  width: 320px;\n  outline: none;\n  display: flex;\n  flex-direction: column;\n`;\n_c2 = StyledModal;\nconst ModalWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 24px;\n  background-color: #fff;\n  max-height: 100%;\n  height: 100%;\n  align-items: center;\n  backface-visibility: hidden;\n  padding: 1.25rem;\n  ${border};\n`;\n_c3 = ModalWrapper;\nconst ModalTitle = styled.p`\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n  font-size: 24px;\n  font-weight: bold;\n  text-transform: uppercase;\n`;\n_c4 = ModalTitle;\nconst ModalContent = styled.p`\n  flex: 1 1 auto;\n  text-align: center;\n`;\n_c5 = ModalContent;\nModalContent.displayName = \"ModalContent\";\nconst ModalFooter = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex: 0 0 auto;\n  width: 100%;\n`;\n_c6 = ModalFooter;\nconst Button = styled.button`\n  font-size: 16px;\n`;\n// Game\n_c7 = Button;\nconst arr = new Array(DIMS ** 2).fill(null);\nconst board = new Board();\nconst TicTacToe = _ref2 => {\n  _s();\n  let {\n    squares = arr\n  } = _ref2;\n  const [players, setPlayers] = useState({\n    human: null,\n    computer: null\n  });\n  const [gameState, setGameState] = useState(GAME_STATES.notStarted);\n  const [grid, setGrid] = useState(squares);\n  const [winner, setWinner] = useState(null);\n  const [nextMove, setNextMove] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [mode, setMode] = useState(GAME_MODES.medium);\n\n  /**\r\n   * On every move, check if there is a winner. If yes, set game state to over and open result modal\r\n   */\n  useEffect(() => {\n    const winner = board.getWinner(grid);\n    const declareWinner = winner => {\n      let winnerStr;\n      switch (winner) {\n        case PLAYER_X:\n          winnerStr = \"Player X wins!\";\n          break;\n        case PLAYER_O:\n          winnerStr = \"Player O wins!\";\n          break;\n        case DRAW:\n        default:\n          winnerStr = \"It's a draw\";\n      }\n      setGameState(GAME_STATES.over);\n      setWinner(winnerStr);\n      // Slight delay for the modal so there is some time to see the last move\n      setTimeout(() => setModalOpen(true), 300);\n    };\n    if (winner !== null && gameState !== GAME_STATES.over) {\n      declareWinner(winner);\n    }\n  }, [gameState, grid, nextMove]);\n\n  /**\r\n   * Set the grid square with respective player that made the move. Only make a move when the game is in progress.\r\n   * useCallback is necessary to prevent unnecessary recreation of the function, unless gameState changes, since it is\r\n   * being tracked in useEffect\r\n   * @type {Function}\r\n   */\n  const move = useCallback((index, player) => {\n    if (player && gameState === GAME_STATES.inProgress) {\n      setGrid(grid => {\n        const gridCopy = grid.concat();\n        gridCopy[index] = player;\n        return gridCopy;\n      });\n    }\n  }, [gameState]);\n\n  /**\r\n   * Make computer move. If it's the first move (board is empty), make move at any random cell to skip\r\n   * unnecessary minimax calculations\r\n   * @type {Function}\r\n   */\n  const computerMove = useCallback(() => {\n    // Important to pass a copy of the grid here\n    const board = new Board(grid.concat());\n    const emptyIndices = board.getEmptySquares(grid);\n    let index;\n    switch (mode) {\n      case GAME_MODES.easy:\n        do {\n          index = getRandomInt(0, 8);\n        } while (!emptyIndices.includes(index));\n        break;\n      case GAME_MODES.medium:\n        // Medium level is basically ~half of the moves are minimax and the other ~half random\n        const smartMove = !board.isEmpty(grid) && Math.random() < 0.5;\n        if (smartMove) {\n          index = minimax(board, players.computer)[1];\n        } else {\n          do {\n            index = getRandomInt(0, 8);\n          } while (!emptyIndices.includes(index));\n        }\n        break;\n      case GAME_MODES.difficult:\n      default:\n        index = board.isEmpty(grid) ? getRandomInt(0, 8) : minimax(board, players.computer)[1];\n    }\n    if (!grid[index]) {\n      move(index, players.computer);\n      setNextMove(players.human);\n    }\n  }, [move, grid, players, mode]);\n\n  /**\r\n   * Make computer move when it's computer's turn\r\n   */\n  useEffect(() => {\n    let timeout;\n    if (nextMove !== null && nextMove === players.computer && gameState !== GAME_STATES.over) {\n      // Delay computer moves to make them more natural\n      timeout = setTimeout(() => {\n        computerMove();\n      }, 500);\n    }\n    return () => timeout && clearTimeout(timeout);\n  }, [nextMove, computerMove, players.computer, gameState]);\n  const humanMove = index => {\n    if (!grid[index] && nextMove === players.human) {\n      move(index, players.human);\n      setNextMove(players.computer);\n    }\n  };\n  const choosePlayer = option => {\n    setPlayers({\n      human: option,\n      computer: switchPlayer(option)\n    });\n    setGameState(GAME_STATES.inProgress);\n    setNextMove(PLAYER_X);\n  };\n  const startNewGame = () => {\n    setGameState(GAME_STATES.notStarted);\n    setGrid(arr);\n    setModalOpen(false);\n  };\n  const changeMode = e => {\n    setMode(e.target.value);\n  };\n  return gameState === GAME_STATES.notStarted ? /*#__PURE__*/_jsxDEV(Screen, {\n    children: [/*#__PURE__*/_jsxDEV(Inner, {\n      children: [/*#__PURE__*/_jsxDEV(ChooseText, {\n        children: \"Select difficulty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: changeMode,\n        value: mode,\n        children: Object.keys(GAME_MODES).map(key => {\n          const gameMode = GAME_MODES[key];\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: gameMode,\n            children: key\n          }, gameMode, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Inner, {\n      children: [/*#__PURE__*/_jsxDEV(ChooseText, {\n        children: \"Choose your player\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonRow, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => choosePlayer(PLAYER_X),\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"or\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => choosePlayer(PLAYER_O),\n          children: \"O\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 436,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Container, {\n    dims: DIMS,\n    children: [grid.map((value, index) => {\n      const isActive = value !== null;\n      return /*#__PURE__*/_jsxDEV(Square, {\n        \"data-testid\": `square_${index}`,\n        onClick: () => humanMove(index),\n        children: isActive && /*#__PURE__*/_jsxDEV(Marker, {\n          children: value === PLAYER_X ? \"X\" : \"O\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 26\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(Strikethrough, {\n      styles: gameState === GAME_STATES.over && board.getStrikethroughStyles()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultModal, {\n      isOpen: modalOpen,\n      winner: winner,\n      close: () => setModalOpen(false),\n      startNewGame: startNewGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 460,\n    columnNumber: 5\n  }, this);\n};\n_s(TicTacToe, \"WCjgt3syk0+/ASjw6JZBXoi5+9k=\");\n_c8 = TicTacToe;\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: ${_ref3 => {\n  let {\n    dims\n  } = _ref3;\n  return `${dims * (SQUARE_DIMS + 5)}px`;\n}};\n  flex-flow: wrap;\n  position: relative;\n`;\n_c9 = Container;\nconst Square = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: ${SQUARE_DIMS}px;\n  height: ${SQUARE_DIMS}px;\n  ${border};\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\n_c10 = Square;\nSquare.displayName = \"Square\";\nconst Marker = styled.p`\n  font-size: 68px;\n`;\n_c11 = Marker;\nconst ButtonRow = styled.div`\n  display: flex;\n  width: 150px;\n  justify-content: space-between;\n`;\n_c12 = ButtonRow;\nconst Screen = styled.div``;\n_c13 = Screen;\nconst Inner = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 30px;\n`;\n_c14 = Inner;\nconst ChooseText = styled.p``;\n_c15 = ChooseText;\nconst Strikethrough = styled.div`\n  position: absolute;\n  ${_ref4 => {\n  let {\n    styles\n  } = _ref4;\n  return styles;\n}}\n  background-color: indianred;\n  height: 5px;\n  width: ${_ref5 => {\n  let {\n    styles\n  } = _ref5;\n  return !styles && \"0px\";\n}};\n`;\n_c16 = Strikethrough;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n$RefreshReg$(_c, \"ResultModal\");\n$RefreshReg$(_c2, \"StyledModal\");\n$RefreshReg$(_c3, \"ModalWrapper\");\n$RefreshReg$(_c4, \"ModalTitle\");\n$RefreshReg$(_c5, \"ModalContent\");\n$RefreshReg$(_c6, \"ModalFooter\");\n$RefreshReg$(_c7, \"Button\");\n$RefreshReg$(_c8, \"TicTacToe\");\n$RefreshReg$(_c9, \"Container\");\n$RefreshReg$(_c10, \"Square\");\n$RefreshReg$(_c11, \"Marker\");\n$RefreshReg$(_c12, \"ButtonRow\");\n$RefreshReg$(_c13, \"Screen\");\n$RefreshReg$(_c14, \"Inner\");\n$RefreshReg$(_c15, \"ChooseText\");\n$RefreshReg$(_c16, \"Strikethrough\");","map":{"version":3,"names":["Modal","React","useState","useEffect","useCallback","styled","border","css","DIMS","DRAW","PLAYER_X","PLAYER_O","SCORES","SQUARE_DIMS","GAME_STATES","notStarted","inProgress","over","GAME_MODES","easy","medium","difficult","Main","main","Footer","footer","FooterInner","div","Board","constructor","grid","makeMove","square","player","getEmptySquares","squares","forEach","i","push","isEmpty","length","getWinner","winningCombos","res","el","winningIndex","getStrikethroughStyles","defaultWidth","diagonalWidth","clone","concat","Array","fill","switchPlayer","getRandomInt","min","max","Math","ceil","floor","random","minimax","board","mult","String","thisScore","maxScore","bestMove","empty","copy","customStyles","overlay","backgroundColor","ResultModal","isOpen","close","startNewGame","winner","StyledModal","ModalWrapper","ModalTitle","p","ModalContent","displayName","ModalFooter","Button","button","arr","TicTacToe","players","setPlayers","human","computer","gameState","setGameState","setGrid","setWinner","nextMove","setNextMove","modalOpen","setModalOpen","mode","setMode","declareWinner","winnerStr","setTimeout","move","index","gridCopy","computerMove","emptyIndices","includes","smartMove","timeout","clearTimeout","humanMove","choosePlayer","option","changeMode","e","target","value","Object","keys","map","key","gameMode","isActive","Container","dims","Square","Marker","ButtonRow","Screen","Inner","ChooseText","Strikethrough","styles"],"sources":["C:/Users/olefi/OneDrive/Рабочий стол/tictactoereact/src/AI.jsx"],"sourcesContent":["// Inside APP\r\n// import React from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport styled from \"styled-components\";\r\n// import TicTacToe from \"./TicTacToe\";\r\nimport \"papercss/dist/paper.min.css\";\r\nconst border = css`\r\n  border-bottom-left-radius: 15px 255px;\r\n  border-bottom-right-radius: 225px 15px;\r\n  border-top-left-radius: 255px 15px;\r\n  border-top-right-radius: 15px 225px;\r\n  border: 2px solid #41403e;\r\n`;\r\nconst DIMS = 3;\r\nconst DRAW = 0;\r\nconst PLAYER_X = 1;\r\nconst PLAYER_O = 2;\r\nconst SCORES = {\r\n  1: 1,\r\n  0: 0,\r\n  2: -1\r\n};\r\nconst SQUARE_DIMS = 100;\r\nconst GAME_STATES = {\r\n  notStarted: \"not_started\",\r\n  inProgress: \"in_progress\",\r\n  over: \"over\"\r\n};\r\n\r\nconst GAME_MODES = {\r\n  easy: \"easy\",\r\n  medium: \"medium\",\r\n  difficult: \"difficult\"\r\n};\r\n\r\n\r\nconst Main = styled.main`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex: 1 0 auto;\r\n`;\r\n\r\nconst Footer = styled.footer`\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 100%;\r\n  flex: 0 0 auto;\r\n`;\r\n\r\nconst FooterInner = styled.div`\r\n  padding: 16px 0;\r\n`;\r\n// Board\r\nexport default class Board {\r\n  constructor(grid) {\r\n    this.grid = grid || new Array(DIMS ** 2).fill(null);\r\n    this.winningIndex = null;\r\n  }\r\n\r\n  makeMove = (square, player) => {\r\n    if (this.grid[square] === null) {\r\n      this.grid[square] = player;\r\n    }\r\n  };\r\n\r\n  // Collect indices of empty squares and return them\r\n  getEmptySquares = (grid = this.grid) => {\r\n    let squares = [];\r\n    grid.forEach((square, i) => {\r\n      if (square === null) squares.push(i);\r\n    });\r\n    return squares;\r\n  };\r\n\r\n  isEmpty = (grid = this.grid) => {\r\n    return this.getEmptySquares(grid).length === DIMS ** 2;\r\n  };\r\n\r\n  getWinner = (grid = this.grid) => {\r\n    const winningCombos = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    let res = null;\r\n    winningCombos.forEach((el, i) => {\r\n      if (\r\n        grid[el[0]] !== null &&\r\n        grid[el[0]] === grid[el[1]] &&\r\n        grid[el[0]] === grid[el[2]]\r\n      ) {\r\n        res = grid[el[0]];\r\n        this.winningIndex = i;\r\n      } else if (res === null && this.getEmptySquares(grid).length === 0) {\r\n        res = DRAW;\r\n        this.winningIndex = null;\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  /**\r\n   * Get the styles for strike through based on the combination that won\r\n   */\r\n  getStrikethroughStyles = () => {\r\n    const defaultWidth = 285;\r\n    const diagonalWidth = 400;\r\n    switch (this.winningIndex) {\r\n      case 0:\r\n        return `\r\n          transform: none;\r\n          top: 41px;\r\n          left: 15px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 1:\r\n        return `\r\n          transform: none;\r\n          top: 140px;\r\n          left: 15px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 2:\r\n        return `\r\n          transform: none;\r\n          top: 242px;\r\n          left: 15px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 3:\r\n        return `\r\n          transform: rotate(90deg);\r\n          top: 145px;\r\n          left: -86px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 4:\r\n        return `\r\n          transform: rotate(90deg);\r\n          top: 145px;\r\n          left: 15px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 5:\r\n        return `\r\n          transform: rotate(90deg);\r\n          top: 145px;\r\n          left: 115px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 6:\r\n        return `\r\n          transform: rotate(45deg);\r\n          top: 145px;\r\n          left: -44px;\r\n          width: ${diagonalWidth}px;\r\n        `;\r\n      case 7:\r\n        return `\r\n          transform: rotate(-45deg);\r\n          top: 145px;\r\n          left: -46px;\r\n          width: ${diagonalWidth}px;\r\n        `;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  clone = () => {\r\n    return new Board(this.grid.concat());\r\n  };\r\n}\r\n// AI\r\nconst switchPlayer = player => {\r\n  return player === PLAYER_X ? PLAYER_O : PLAYER_X;\r\n};\r\n\r\nconst getRandomInt = (min, max) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\nconst minimax = (board, player) => {\r\n  const mult = SCORES[String(player)];\r\n  let thisScore;\r\n  let maxScore = -1;\r\n  let bestMove = null;\r\n\r\n  if (board.getWinner() !== null) {\r\n    return [SCORES[board.getWinner()], 0];\r\n  } else {\r\n    for (let empty of board.getEmptySquares()) {\r\n      let copy = board.clone();\r\n      copy.makeMove(empty, player);\r\n      thisScore = mult * minimax(copy, switchPlayer(player))[0];\r\n\r\n      if (thisScore >= maxScore) {\r\n        maxScore = thisScore;\r\n        bestMove = empty;\r\n      }\r\n    }\r\n\r\n    return [mult * maxScore, bestMove];\r\n  }\r\n};\r\n\r\n\r\n// Styles\r\nconst customStyles = {\r\n  overlay: {\r\n    backgroundColor: \"rgba(0,0,0, 0.6)\"\r\n  }\r\n};\r\n\r\nexport const ResultModal = ({ isOpen, close, startNewGame, winner }) => {\r\n  return (\r\n    <StyledModal\r\n      isOpen={isOpen}\r\n      onRequestClose={close}\r\n      style={customStyles}\r\n      ariaHideApp={false}\r\n    >\r\n      <ModalWrapper>\r\n        <ModalTitle>Game over</ModalTitle>\r\n        <ModalContent>{winner}</ModalContent>\r\n\r\n        <ModalFooter>\r\n          <Button onClick={close}>Close</Button>\r\n          <Button onClick={startNewGame}>Start over</Button>\r\n        </ModalFooter>\r\n      </ModalWrapper>\r\n    </StyledModal>\r\n  );\r\n};\r\nconst StyledModal = styled(Modal)`\r\n  height: 300px;\r\n  position: relative;\r\n  margin: 0 auto;\r\n  top: 10%;\r\n  right: auto;\r\n  bottom: auto;\r\n  width: 320px;\r\n  outline: none;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst ModalWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 24px;\r\n  background-color: #fff;\r\n  max-height: 100%;\r\n  height: 100%;\r\n  align-items: center;\r\n  backface-visibility: hidden;\r\n  padding: 1.25rem;\r\n  ${border};\r\n`;\r\n\r\nconst ModalTitle = styled.p`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n`;\r\n\r\nconst ModalContent = styled.p`\r\n  flex: 1 1 auto;\r\n  text-align: center;\r\n`;\r\nModalContent.displayName = \"ModalContent\";\r\n\r\nconst ModalFooter = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex: 0 0 auto;\r\n  width: 100%;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  font-size: 16px;\r\n`;\r\n// Game\r\nconst arr = new Array(DIMS ** 2).fill(null);\r\nconst board = new Board();\r\n\r\nconst TicTacToe = ({ squares = arr }) => {\r\n  const [players, setPlayers] = useState({ human: null, computer: null });\r\n  const [gameState, setGameState] = useState(GAME_STATES.notStarted);\r\n  const [grid, setGrid] = useState(squares);\r\n  const [winner, setWinner] = useState(null);\r\n  const [nextMove, setNextMove] = useState(null);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [mode, setMode] = useState(GAME_MODES.medium);\r\n\r\n  /**\r\n   * On every move, check if there is a winner. If yes, set game state to over and open result modal\r\n   */\r\n  useEffect(() => {\r\n    const winner = board.getWinner(grid);\r\n    const declareWinner = winner => {\r\n      let winnerStr;\r\n      switch (winner) {\r\n        case PLAYER_X:\r\n          winnerStr = \"Player X wins!\";\r\n          break;\r\n        case PLAYER_O:\r\n          winnerStr = \"Player O wins!\";\r\n          break;\r\n        case DRAW:\r\n        default:\r\n          winnerStr = \"It's a draw\";\r\n      }\r\n      setGameState(GAME_STATES.over);\r\n      setWinner(winnerStr);\r\n      // Slight delay for the modal so there is some time to see the last move\r\n      setTimeout(() => setModalOpen(true), 300);\r\n    };\r\n\r\n    if (winner !== null && gameState !== GAME_STATES.over) {\r\n      declareWinner(winner);\r\n    }\r\n  }, [gameState, grid, nextMove]);\r\n\r\n  /**\r\n   * Set the grid square with respective player that made the move. Only make a move when the game is in progress.\r\n   * useCallback is necessary to prevent unnecessary recreation of the function, unless gameState changes, since it is\r\n   * being tracked in useEffect\r\n   * @type {Function}\r\n   */\r\n  const move = useCallback(\r\n    (index, player) => {\r\n      if (player && gameState === GAME_STATES.inProgress) {\r\n        setGrid(grid => {\r\n          const gridCopy = grid.concat();\r\n          gridCopy[index] = player;\r\n          return gridCopy;\r\n        });\r\n      }\r\n    },\r\n    [gameState]\r\n  );\r\n\r\n  /**\r\n   * Make computer move. If it's the first move (board is empty), make move at any random cell to skip\r\n   * unnecessary minimax calculations\r\n   * @type {Function}\r\n   */\r\n  const computerMove = useCallback(() => {\r\n    // Important to pass a copy of the grid here\r\n    const board = new Board(grid.concat());\r\n    const emptyIndices = board.getEmptySquares(grid);\r\n    let index;\r\n    switch (mode) {\r\n      case GAME_MODES.easy:\r\n        do {\r\n          index = getRandomInt(0, 8);\r\n        } while (!emptyIndices.includes(index));\r\n        break;\r\n      case GAME_MODES.medium:\r\n        // Medium level is basically ~half of the moves are minimax and the other ~half random\r\n        const smartMove = !board.isEmpty(grid) && Math.random() < 0.5;\r\n        if (smartMove) {\r\n          index = minimax(board, players.computer)[1];\r\n        } else {\r\n          do {\r\n            index = getRandomInt(0, 8);\r\n          } while (!emptyIndices.includes(index));\r\n        }\r\n        break;\r\n      case GAME_MODES.difficult:\r\n      default:\r\n        index = board.isEmpty(grid)\r\n          ? getRandomInt(0, 8)\r\n          : minimax(board, players.computer)[1];\r\n    }\r\n    if (!grid[index]) {\r\n      move(index, players.computer);\r\n      setNextMove(players.human);\r\n    }\r\n  }, [move, grid, players, mode]);\r\n\r\n  /**\r\n   * Make computer move when it's computer's turn\r\n   */\r\n  useEffect(() => {\r\n    let timeout;\r\n    if (\r\n      nextMove !== null &&\r\n      nextMove === players.computer &&\r\n      gameState !== GAME_STATES.over\r\n    ) {\r\n      // Delay computer moves to make them more natural\r\n      timeout = setTimeout(() => {\r\n        computerMove();\r\n      }, 500);\r\n    }\r\n    return () => timeout && clearTimeout(timeout);\r\n  }, [nextMove, computerMove, players.computer, gameState]);\r\n\r\n  const humanMove = index => {\r\n    if (!grid[index] && nextMove === players.human) {\r\n      move(index, players.human);\r\n      setNextMove(players.computer);\r\n    }\r\n  };\r\n\r\n  const choosePlayer = option => {\r\n    setPlayers({ human: option, computer: switchPlayer(option) });\r\n    setGameState(GAME_STATES.inProgress);\r\n    setNextMove(PLAYER_X);\r\n  };\r\n\r\n  const startNewGame = () => {\r\n    setGameState(GAME_STATES.notStarted);\r\n    setGrid(arr);\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const changeMode = e => {\r\n    setMode(e.target.value);\r\n  };\r\n\r\n  return gameState === GAME_STATES.notStarted ? (\r\n    <Screen>\r\n      <Inner>\r\n        <ChooseText>Select difficulty</ChooseText>\r\n        <select onChange={changeMode} value={mode}>\r\n          {Object.keys(GAME_MODES).map(key => {\r\n            const gameMode = GAME_MODES[key];\r\n            return (\r\n              <option key={gameMode} value={gameMode}>\r\n                {key}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      </Inner>\r\n      <Inner>\r\n        <ChooseText>Choose your player</ChooseText>\r\n        <ButtonRow>\r\n          <button onClick={() => choosePlayer(PLAYER_X)}>X</button>\r\n          <p>or</p>\r\n          <button onClick={() => choosePlayer(PLAYER_O)}>O</button>\r\n        </ButtonRow>\r\n      </Inner>\r\n    </Screen>\r\n  ) : (\r\n    <Container dims={DIMS}>\r\n      {grid.map((value, index) => {\r\n        const isActive = value !== null;\r\n\r\n        return (\r\n          <Square\r\n            data-testid={`square_${index}`}\r\n            key={index}\r\n            onClick={() => humanMove(index)}\r\n          >\r\n            {isActive && <Marker>{value === PLAYER_X ? \"X\" : \"O\"}</Marker>}\r\n          </Square>\r\n        );\r\n      })}\r\n      <Strikethrough\r\n        styles={\r\n          gameState === GAME_STATES.over && board.getStrikethroughStyles()\r\n        }\r\n      />\r\n      <ResultModal\r\n        isOpen={modalOpen}\r\n        winner={winner}\r\n        close={() => setModalOpen(false)}\r\n        startNewGame={startNewGame}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  width: ${({ dims }) => `${dims * (SQUARE_DIMS + 5)}px`};\r\n  flex-flow: wrap;\r\n  position: relative;\r\n`;\r\n\r\nconst Square = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: ${SQUARE_DIMS}px;\r\n  height: ${SQUARE_DIMS}px;\r\n  ${border};\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nSquare.displayName = \"Square\";\r\n\r\nconst Marker = styled.p`\r\n  font-size: 68px;\r\n`;\r\n\r\nconst ButtonRow = styled.div`\r\n  display: flex;\r\n  width: 150px;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst Screen = styled.div``;\r\n\r\nconst Inner = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 30px;\r\n`;\r\nconst ChooseText = styled.p``;\r\n\r\nconst Strikethrough = styled.div`\r\n  position: absolute;\r\n  ${({ styles }) => styles}\r\n  background-color: indianred;\r\n  height: 5px;\r\n  width: ${({ styles }) => !styles && \"0px\"};\r\n`;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}